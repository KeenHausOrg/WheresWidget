@page "/"
@using Microsoft.Extensions.Configuration
@using Models
@using Newtonsoft.Json

@implements IDisposable
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration

<PageTitle>Where is Widget?</PageTitle>
<MudText Typo="Typo.h2">Where is Widget?</MudText>
<MudText Typo="Typo.body1">This website was made as a way to track Widget the cat around the house.</MudText>
<MudSpacer></MudSpacer>
<MudGrid Class="mt-2 mb-3">
    <MudItem md="12"><MudText>This is what I know about Widget's wereabouts ...</MudText></MudItem>
    <MudItem md="12" Class=" d-flex justify-center mt-2">
        <MudText><strong>Last Known Pi Cam Location:</strong> @_piCamMessage</MudText>
    </MudItem>
</MudGrid>

<MudDivider></MudDivider>
<MudText Typo="Typo.h5">Details</MudText>
<MudText Typo="Typo.body2" Class="mt-1">This iteration uses a webcam aimed at Widget's most common sleeping place around the house, the corner by the windows.</MudText>
<MudText Typo="Typo.body2">I am currently using a Pi Zero 2 with webcam, and doing object detection using TensorFlowLite. If you want to know more here is my tutorial.</MudText>

@code{
    private string _piCamMessage = "I don't know where Widget is.";
    private Timer? _apiTimer;
    private Timer? _resetTimer;

    protected override void OnInitialized()
    {
        var startTimeSpan = TimeSpan.Zero;
        var periodTimeSpan = TimeSpan.FromMinutes(1);
        _apiTimer = new Timer(async (e)=>
        {
            await GetPiCamStatus();
        }, null, startTimeSpan, periodTimeSpan);

        _resetTimer = new Timer((e) =>
        {
            _piCamMessage = "It has been over an hour since last I saw Widget... =(";
            StateHasChanged();
        }, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
    }

    public void Dispose()
    {
        _apiTimer?.Dispose();
        _resetTimer?.Dispose();
    }

    private async Task GetPiCamStatus()
    {
        Console.WriteLine("Requesting location...");
        var request = new HttpRequestMessage(HttpMethod.Get,
            Configuration["EventServerAddress"]);

        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        var msg = await response.Content.ReadAsStringAsync();
        if(msg != null)
        {
            var a = JsonConvert.DeserializeObject<string>(msg) ?? string.Empty;
            Widgetwereabouts widgetWereabouts = JsonConvert.DeserializeObject<Widgetwereabouts>(a) ?? new Widgetwereabouts();
            Double.TryParse(widgetWereabouts.timeStamp, out var parsedSecs);
            DateTimeOffset dateTimeOffset = (DateTimeOffset.FromUnixTimeSeconds((long)parsedSecs)).AddHours(-6);

            var secondsToWait = 3600;
            _piCamMessage = $"Widget was last seen on the chair at {dateTimeOffset.ToString("HH:mm")} on {dateTimeOffset.ToString("dd/MM/yy")}";
            StateHasChanged();
            _resetTimer?.Change(secondsToWait * 1000, secondsToWait * 1000);
        }
    }
}